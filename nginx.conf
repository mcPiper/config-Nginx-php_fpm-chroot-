# /etc/nginx/nginx.conf
# 
# справку по любой директиве конфига можно получить так: 
# http://nginx.org/r/variables_hash_max_size/ru
# 

# лучше использовать значения по-умолчанию для большинства директив и современную версию nginx
# 
# если решили что-то покрутить и потюнить, почитайте официальные рукводства и эти материалы:
# https://www.nginx.com/blog/tuning-nginx/
# https://www.nginx.com/resources/admin-guide/serving-static-content/

# Максимальное количество соединений, которые nginx 
# может обслуживать одновременно определяются произведением двух параметров:
# Всего соединений = worker_processes * worker_connections

user www-data;

# количество рабочих процессов должно быть не больше количества ядер процессора
# за исключением ситуации, когда nginx делает много файловых операций. лучше оставить auto
worker_processes 2;

pid /var/run/nginx.pid;

# максимальное число открытых файлов (RLIMIT_NOFILE) для рабочих процессов
# нужно помнить, каждое новое соединение создаёт как минимум два открытых "файла"
# worker_rlimit_nofile = worker_processes * worker_connections * 2
# ниже установлено значение для двух воркеров для этого примера конфигурации
worker_rlimit_nofile 16384; 

events {
    # максимальное число соединений, которое одновременно может открыть рабочий процесс
    worker_connections  4096;
    # есть смысл включать только для синтетических тестов типа ab и siedge
    # multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # if you find this config useful, please consider donating bitcoin:1MjxPWAyebHhjQdjLPGcV5oZd5VbEWrAga

    # обязательно нужно включать sendfile_max_chunk, если включаем sendfile,
    # иначе один посетитель с быстрым каналом заблокирует рабочий процесс
    sendfile  on;
    sendfile_max_chunk 1m;
    tcp_nopush  on;

    error_log  /var/log/nginx/error.log;
    access_log  /var/log/nginx/access.log;

    resolver 8.8.8.8 8.8.4.4;
    server_tokens off;

    # увеличиваем размеры бакетов для переменных,
    # если у нас множество сайтов и переменных
    # при ошибке "[emerg]: could not build the variables_hash"
    # variables_hash_max_size 1024;
    # variables_hash_bucket_size 128;

    # увеличиваем размер бакета для имён серверов,
    # если их много или они длинные 
    # e.g. example.com www.example.com somelongsubdomain.example.com
    # при ошибке "[emerg]: could not build the server_names_hash"
    # server_names_hash_bucket_size 128;

    # см. комментарий к large_client_header_buffers ниже. то же самое, но со стороны бэкэнда
    # при ошибке "[error]: upstream sent too big header while reading response header from upstream"
    fastcgi_buffers 8 16k;
    fastcgi_buffer_size 16k;

    # если к сайту не подключен внешний сервис защиты от DDoS, а соединений много,
    # можно уменьшить таймаут между двумя операциями чтения ответа клиентом
    # send_timeout 20s;
    # и чтения тела запроса клиента
    # client_body_timeout 20s;
    # и немного сэкономить память на уже закрытых соединениях (на keep-alive не работает)
    # reset_timedout_connection on;
    
    # увеличивать client_max_body_size здесь не нужно, это нужно сделать в контексте
    # того локейшна, который будет обрабатывать загружаемые пользователями файлы
    # часто это локейшн с админкой сайта или вообще отдельный скрипт загрузки

    # если URI с огромным QUERY_STRING, в заголовках запроса или в cookie куча инфы
    # Строка запроса не должна превышать размера одного буфера, 
    # иначе клиенту возвращается ошибка 414 (Request-URI Too Large). 
    # Поле заголовка запроса также не должно превышать размера одного буфера, 
    # иначе клиенту возвращается ошибка 400 (Bad Request).
    # large_client_header_buffers 8 16k;
    
    # для высоконагруженных серверов с огромным количеством файлов, можно включить кеширование
    # дескрипторов открытых файлов, информации об их размерах, времени модификации и иного
    # open_file_cache max=300000 inactive=20s;
    # open_file_cache_valid 30s;
    # open_file_cache_min_uses 2;
    # open_file_cache_errors on;
    
    # при превышении рейтлимита по запросам в секунду возвращаем код 429 "Too Many Requests"
    limit_req_status 429;

    # включаем сжатие, причём не только для text/html
    gzip on;
    gzip_disable "msie6";
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/x-javascript
        application/xml
        application/xml+rss;
        
    # определяем более информативный формат лога
    log_format  wtimes '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       '"$request_time" ' # время обработки запроса в секундах с точностью до миллисекунд; время, прошедшее с момента чтения первых байт от клиента до момента записи в лог после отправки последних байт клиенту
                       '"$request_length" ' # длина запроса (включая строку запроса, заголовок и тело запроса)
                       '"$request_completion" ' # “OK” если запрос завершился, либо пустая строка
                       '"$host" "$server_name" ' # также записываем в лог заголовок Host клиента и server_name
                       '"$upstream_cache_status" '
                       '"$http_cf_connecting_ip" ' # оригинальный айпишник юзера, пришедшего через cloudflare
                       '"$server_port"';
    
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
    
    # если этот конфиг оказался для вас полезен - поддержите автора монеткой bitcoin:1MjxPWAyebHhjQdjLPGcV5oZd5VbEWrAga
}
